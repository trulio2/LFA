#!/bin/bash
usage(){
 test $1 -eq 1 || {
        [[ -z $2 ]] || { echo "$2" 1>&2; }
	echo "Usar: ${0/.\/} [OPTION]... AFNλ" 1>&2
        echo "	-p,--path       Mostra os caminhos testados"
	echo "	-i,--info       Mostra informações sobre o AFNλ"
	echo "	-m,--matrix     Mostra matriz de conexões entre os estados"
        echo "	-h,--help       Mostra esta mensagem"
	exit 1; }
}
args=
showpath=off
showinfo=off
showmatrix=0ff
while [ $# != 0 ]; do
    case $1 in
      --help) usage 0 ;;
      --path) showpath=on ;;
      --info) showinfo=on ;;
      --matrix) showmatrix=on ;;
      --?*) usage 0 "Opção Desconhecida: $1" ;;
      -?*) {
           opt=($(echo "${1/-}" | fold -w1))
           for i in ${opt[@]}; do
                  case $i in
	            p) showpath=on ;;
		    h) usage 0 ;;
		    i) showinfo=on ;;
		    m) showmatrix=on ;;
                    *) usage 0 "Opção Desconhecida: -$i" ;;
		  esac
          done; } ;;
      *) args="$args $1" ;;
    esac
    shift
done
args=($args)
usage ${#args[@]}
test -e ${args} || usage 0 "O arquivo \"$args\" não existe"
test -f ${args} || usage 0 "$args não é um arquivo regular"

ifss=$IFS
IFS='['
j=0
for i in $(cat $args); do
	linha[$j]=$( echo "$i" | tr -d \"}{]: | sed "s:,:,\ :g" | tr -d " " | tr , " " )
	let j++
done
estados=${linha[2]}
transicoes=${linha[3]}
finals=${linha[${#linha[@]}-1]}
initials=${linha[${#linha[@]}-2]}
for (( i = 4; i < ${#linha[@]} - 2; i++ )); do
	grafo="$grafo${linha[$i]}"
done
IFS=$ifss
grafo=(${grafo})
grafo[${#grafo[@]}-1]="${grafo[${#grafo[@]}-1]}" | head -n 1
estados=($estados)
finals=($finals)
initials=($initials)
transicoes=($transicoes)

test $showinfo = on && {
            echo "Estados: ${estados[@]}"
            echo "Estados Iniciais: ${initials[@]}"
	    echo "Estados Finais: ${finals[@]}"
            echo "Transições: ${transicoes[@]}"
	    echo
 }

declare -A matriz
for i in  ${!finals[@]}; do
	for j in ${!estados[@]}; do
		[[ ${finals[$i]} == ${estados[$j]} ]] && { finals[$i]=$j; break; }
	done
done
for i in ${!initials[@]}; do
	for j in ${!estados[@]}; do
		[[ ${initials[$i]} == ${estados[$j]} ]] && { initials[$i]=$j; break; }
	done
done
for (( i=0; i < ${#grafo[@]}; i+=3 )); do
	for j in ${!estados[@]}; do
		[[ ${grafo[$i]} == ${estados[$j]} ]] && { grafo[$i]=$j; break; }
	done
done
for (( i=2; i < ${#grafo[@]}; i+=3 )); do
	for j in ${!estados[@]}; do
		[[ ${grafo[$i]} == ${estados[$j]} ]] && { grafo[$i]=$j; break; }
	done
done
for (( i = 0; i < ${#grafo[@]}; i+=3 )); do
	matriz[${grafo[$i]},${grafo[$i+2]}]="${matriz[${grafo[$i]},${grafo[$i+2]}]}${grafo[$i+1]}"
done

matrix() {
	printf "%$((${#estados[@]}+1))s" ''
	for i in ${estados[@]}; do
		printf "%6s" $i
	done
	echo
	for i in ${!estados[@]}; do
		printf "%$((${#estados[@]}+1))s" ${estados[$i]}
		for j in ${!estados[@]}; do
			if [[ -z ${matriz[$i,$j]} ]]; then
				printf "%6s" "-"
			else
				printf "%6s" "${matriz[$i,$j]}"
			fi
		done
		echo
	done
	echo
}
test $showmatrix = on && matrix

checkfinal(){
	local k=0
	for k in ${finals[@]}; do
		[[ ${atual[$1]} == $k ]] && { check="Sim"; break; }
	done
}

showpath(){
	local i
	for i in ${atual[@]}; do
		echo -n "${estados[$i]} "
	done
	 echo " =>  $check"
}

verificar(){
	local final=$1
	let final--
	if [[ $3 -ge ${#teste[@]} && $check == "Nao" ]]; then
		checkfinal $final
		test $showpath = on && showpath
	else
		if [[ $check == "Nao" ]]; then
			[[ ${teste[$3]} == '#' ]] && { checkfinal $final; test $showpath = on && showpath;  }
			local i=0
			for i in ${!estados[@]}; do
				local conf=0
				valores=($(echo ${matriz[$2,$i]} | fold -w1))
				for val in ${valores[@]}; do
					[[ $val == ${teste[$3]} || $val == '#' ]] && { conf=1; break; }
					conf=0
				done
			if [[ $conf -eq 1 ]]; then
				atual[$1]=$i
				unset atual[$1+1]
				let inseridos=$1+1
				let test=$3+1
				[[ ${matriz[$2,$i]} == '#' ]] && let test--
				verificar $inseridos $i $test
			fi
			done
		fi
	fi
}
while true; do
	read teste
	[[ -z $teste ]] && { exit 0; }
	teste=($(echo "${teste}" | grep -o .))
	for init in ${initials[@]}; do
		check="Nao"
		b=0
		for i in ${teste[@]}; do
			for (( j = 0; j < ${#transicoes[@]}; j++ )); do
				[[ $i == ${transicoes[$j]} || $i == '#' ]]  &&  break
			done
			test  $j = ${#transicoes[@]} && { b=1; break; }
		done
		for u in ${teste[@]}; do
			[[ $u == '#' && ${#teste[@]} -gt 1 ]] && { b=1 ; break; }
		done
		test  $b = 1  &&  break
		for n in ${!atual[@]}; do
			unset atual[$n]
		done
		inseridos=1
		test=0
		atual[0]=$init
		verificar $inseridos ${atual[0]} $test
		[[ $check == "Sim" ]] && break
	done
	echo $check
done
